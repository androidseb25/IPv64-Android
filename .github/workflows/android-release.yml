name: Android Release

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch: {}

permissions:
  contents: write   # notwendig, um Releases/Tags anzulegen

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      # Pfade an dein Modul anpassen, falls nicht "app"
      APP_MODULE: app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Decode signing keystore
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_PATH=$GITHUB_WORKSPACE/keystore.jks" >> $GITHUB_ENV

      - name: Make gradlew executable
        run: chmod +x gradlew

      # ---- Version aus Gradle lesen ----
      - name: Read versionName from Gradle
        id: ver
        run: |
          VERSION_NAME=$(./gradlew -q :${{ env.APP_MODULE }}:printVersionName)
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT

      # ---- Release Build (APK & AAB) ----
      - name: Build Release APK
        run: ./gradlew :${{ env.APP_MODULE }}:assembleRelease

      - name: Build Release AAB
        run: ./gradlew :${{ env.APP_MODULE }}:bundleRelease

      # ---- Artefakte umbenennen ----
      - name: Rename outputs to ipv64net_vX.Y.Z.*
        id: rename
        run: |
          set -e
          VER="${{ steps.ver.outputs.version_name }}"

          APK_SRC="${{ env.APP_MODULE }}/build/outputs/apk/release"
          AAB_SRC="${{ env.APP_MODULE }}/build/outputs/bundle/release"

          APK_PATH=$(ls "$APK_SRC"/*.apk | head -n1)
          AAB_PATH=$(ls "$AAB_SRC"/*.aab | head -n1)

          APK_OUT="ipv64net_v${VER}.apk"
          AAB_OUT="ipv64net_v${VER}.aab"

          cp "$APK_PATH" "$APK_OUT"
          cp "$AAB_PATH" "$AAB_OUT"

          echo "apk=$APK_OUT" >> $GITHUB_OUTPUT
          echo "aab=$AAB_OUT" >> $GITHUB_OUTPUT
          echo "version=$VER"  >> $GITHUB_OUTPUT

      # ---- Als Build-Artefakt hochladen (optional, nützlich für CI-Download) ----
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipv64net-${{ steps.rename.outputs.version }}
          path: |
            ${{ steps.rename.outputs.apk }}
            ${{ steps.rename.outputs.aab }}

      # ---- GitHub Release erzeugen + Dateien anhängen ----
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.rename.outputs.version }}
          name: "ipv64net v${{ steps.rename.outputs.version }}"
          draft: false
          prerelease: false
          files: |
            ${{ steps.rename.outputs.apk }}
            ${{ steps.rename.outputs.aab }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}